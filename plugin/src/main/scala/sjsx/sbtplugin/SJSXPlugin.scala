//     Project: sbt-sjs-annots
//      Module: plugin
// Description: Plugin for generating an JS file with contents from Scala annotations

// Copyright (c) 2016. Distributed under the MIT License (see included LICENSE file).
package sjsx.sbtplugin

import org.portablescala.sbtplatformdeps.PlatformDepsPlugin.autoImport._
import org.scalajs.core.tools.io.{RelativeVirtualFile, VirtualScalaJSIRFile}
import org.scalajs.core.tools.linker.{ClearableLinker, ModuleInitializer}
import org.scalajs.core.tools.linker.backend.OutputMode
import org.scalajs.sbtplugin.{ScalaJSPlugin, ScalaJSPluginInternal, Stage}
import sbt.Keys._
import sbt._
import sbt.internal.inc.classpath.ClasspathUtilities

object SJSXPlugin extends sbt.AutoPlugin {
  import SJSXPluginInternal._
  import ScalaJSPlugin.AutoImport.{fastOptJS, fullOptJS}

  override def trigger = allRequirements
  override def requires = ScalaJSPlugin

  object autoImport {

//    val sjsxPreamble = settingKey[String]("Preamble to be included in the sjsx file")

//    val sjsxFile = settingKey[File]("Name of JavaScript file generated by sjsx")

//    val sjsxLoader = settingKey[SJSXLoader.Value]("JS module loader to be used(default: SJSXLoader.None)")

//    val sjsxSnippets = taskKey[Seq[SJSXSnippet]]("Additional JavaScript snippets written to the sjsx file")

//    val sjsxDeps = taskKey[Seq[SJSXDependency]]("Additional module dependencies")

//    val sjsxDebug = settingKey[Boolean]("Enable debug statements")

    val sjsxWriteFile = taskKey[Unit]("Writes the sjsx JavaScript file")

    val sjsxConfig: SettingKey[SJSXConfig] =
      settingKey[SJSXConfig]("SJSX configuration (scoped to fastOptJS or fullOptJS)")

    object SJSXLoader extends Enumeration {
      val None = Value
//      val SystemJS = Value
      val CommonJS = Value
    }

    case class SJSXSnippet(prio: Int, arg: String)

    case class SJSXDependency(id: String, global: String)
  }

  import ScalaJSPlugin.AutoImport._
  import autoImport._
  import org.scalajs.sbtplugin.ScalaJSPluginInternal.scalaJSLinker

//  lazy val sjsxConfig = taskKey[SJSXConfig]("assembled SJSX configuration")

  case class SJSXConfig(preamble: String,
                        file: File,
                        loader: SJSXLoader.Value,
                        snippets: Seq[SJSXSnippet],
                        dependencies: Seq[SJSXDependency],
                        debug: Boolean) {
    def withPreamble(preamble: String): SJSXConfig = copy(preamble = preamble)
    def appendPreamble(s: String): SJSXConfig = copy(preamble = preamble + "\n" + s)
    def withFile(file: File): SJSXConfig = copy(file = file)
    def withSnippets(snippets: Seq[SJSXSnippet]): SJSXConfig = copy(snippets = snippets)
    def addSnippets(seq: Seq[SJSXSnippet]): SJSXConfig = copy(snippets = snippets ++ seq)
    def withDependencies(dependencies: Seq[SJSXDependency]): SJSXConfig = copy(dependencies = dependencies)
    def addDependencies(deps: Seq[SJSXDependency]): SJSXConfig = copy(dependencies = dependencies ++ deps)
  }

  lazy val scalaJSTools = taskKey[ScalaJSTools]("Holds required ScalaJS tool objects")

  case class ScalaJSTools(ir: Seq[VirtualScalaJSIRFile with RelativeVirtualFile],
                          linker: ClearableLinker,
                          outputMode: OutputMode,
                          withSourceMaps: Boolean,
                          classLoader: ClassLoader,
                          moduleKind:  org.scalajs.core.tools.linker.ModuleKind,
                          moduleInitializers: Seq[ModuleInitializer])

  override def projectSettings = Seq(
    // default config
//    sjsxDebug := true,
//    sjsxSnippets := Seq(),
//    sjsxDeps := Seq(),
//    sjsxLoader := SJSXLoader.CommonJS,
//    sjsxPreamble := "",

//    sjsxFile in fastOptJS := (crossTarget in (Compile,fastOptJS)).value / s"${(moduleName in compile).value}-fastopt-sjsx.js",
//    sjsxFile in fullOptJS := (crossTarget in (Compile,fullOptJS)).value / s"${(moduleName in compile).value}-fullopt-sjsx.js",

    scalaJSModuleKind := ModuleKind.CommonJSModule,

    scalaJSTools := Def.task {
      ScalaJSTools((scalaJSIR in Compile).value.data,
      (scalaJSLinker in Compile).value,
      scalaJSOutputMode.value,
      emitSourceMaps.value,
      ClasspathUtilities.makeLoader((fullClasspath in Compile).value.map(_.data), scalaInstance.value),
      scalaJSModuleKind.value,
      scalaJSModuleInitializers.value)
    }.value,

    libraryDependencies += "de.surfice" %%% "sjsx" % Version.sjsxVersion,

    sjsxConfig in fastOptJS := SJSXConfig(
      preamble = "",
      file = (crossTarget in (Compile,fastOptJS)).value / s"${(moduleName in compile).value}-fastopt-sjsx.js",
      loader = SJSXLoader.CommonJS,
      snippets = Nil,
      dependencies = Nil,
      debug = false
    ),

    sjsxConfig in fullOptJS := SJSXConfig(
      preamble = "",
      file = (crossTarget in (Compile,fullOptJS)).value / s"${(moduleName in compile).value}-fullopt-sjsx.js",
      loader = SJSXLoader.CommonJS,
      snippets = Nil,
      dependencies = Nil,
      debug = false
    ),

    (fastOptJS in Compile) := (fastOptJS in Compile).dependsOn(sjsxWriteFile in fastOptJS).value,
    (fullOptJS in Compile) := (fullOptJS in Compile).dependsOn(sjsxWriteFile in fullOptJS).value
  ) ++
    perScalaJSStageSettings(Stage.FullOpt) ++
    perScalaJSStageSettings(Stage.FastOpt)


  private def perScalaJSStageSettings(stage: Stage): Seq[Def.Setting[_]] = {

    val stageTask = ScalaJSPluginInternal.stageKeys(stage)

    Seq(
//      sjsxConfig in stageTask := SJSXConfig(
//        preamble = sjsxPreamble.value,
//        file = (sjsxFile in stageTask).value,
//        loader = sjsxLoader.value,
//        snippets = sjsxSnippets.value,
//        dependencies = sjsxDeps.value,
//        debug = sjsxDebug.value
//      ),

      sjsxWriteFile in stageTask := {
        writeAnnotations((sjsxConfig in stageTask).value, scalaJSTools.value,streams.value)
      }
    )
  }

}
